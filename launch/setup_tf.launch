<launch>
    <!-- Setup static transforms for the world and robot -->
    <!--
        The values for each static transform are loaded as parameters from yaml
        files. This makes the values more human readable and easier to change
        for individual sensors without needing to alter this launch file.

        The arguments for each 'tf' node are as follows.
        args = "x y z qx qy qz qw frame_id child_frame_id  period_in_ms"
        x,y,z: translation to origin of child_frame_id in meters
        qx,qy,qz,qw: rotation of frame_id to get to child_frame_id as a
            quaternion
        frame_id: name of original frame
        child_frame_id: name of frame you are transforming to
        period_in_ms: time between transform publishes (100ms = 10Hz)
    -->

    <!-- Forklift Dimensions -->
    <!--
        Potential dimensions of interest:
            base width
            base height (for finding base_footprint)
            distance between front/rear axels
            (bounding box around forklift)
            forklift width
            forklift length
            forklift height
    -->
    <param name="base_width" value="0.360" />

    <!-- odom (world), fixed point on the map where we choose to start our odom
         frame, this does not have to be (0,0) -->
    <rosparam file="$(find setup_tf)/include/world_to_odom.yaml" command="load" />
    <?comment
        ROS does not allow directly accessing parameters and using their values
        as arguments in another command. There is a work around that will allow
        you to load parameters from a .yaml file and then use them as arguments
        for a node or other tag. You must use the 'launch-prefix' attribute with
        the following value:

        launch-prefix = "/bin/bash -c '$* `rosparam get [param1_name]; rosparam
        get [param2_name]; rosparam get ...`' --"

        Note that the whole argument is in double quotes, the section starting
        at the dollar sign until the space before the two dashes is in single
        quotes, the rosparam commands are within back quotes.
    ?>
    <node pkg = "tf"
        type = "static_transform_publisher"
        name = "odom_broadcaster"
        launch-prefix = "/bin/bash -c '$* `rosparam get odom_transform/x;
            rosparam get odom_transform/y; rosparam get odom_transform/z;
            rosparam get odom_transform/qx; rosparam get odom_transform/qy;
            rosparam get odom_transform/qz; rosparam get odom_transform/qw;
            rosparam get odom_transform/frame_id; rosparam get odom_transform/child_frame_id;
            rosparam get odom_transform/period_in_ms`' --" />

    <!-- laser scanners (base_link) -->
    <node pkg = "tf"
        type = "static_transform_publisher"
        name = "laser_scanner1_broadcaster"
        args = "0 0 0 0 0 0 1 base_link laser_scanner1 100" />

    <!-- camera (base_link) -->
    <!--
    camera_link
    camera_rgb_frame
    camera_rgb_optical_frame
    -->
    <node pkg = "tf"
        type = "static_transform_publisher"
        name = "camera_broadcaster"
        args = "0 0 0 0 0 0 1 base_link camera_link 100" />

    <!-- wheel position (base_link) -->
    <!--
    front_axel_middle_link
    wheel_right_link
    wheel_left_link
    -->
    <node pkg = "tf"
        type = "static_transform_publisher"
        name = "front_axel_middle_broadcaster"
        args = "0 0 0 0 0 0 1 base_link front_axel_middle_link 100" />

    <node pkg = "tf"
        type = "static_transform_publisher"
        name = "wheel_right_broadcaster"
        args = "0 -0.185 0 0 0 0 1 front_axel_middle_link wheel_right_link 100" />

    <node pkg = "tf"
        type = "static_transform_publisher"
        name = "wheel_left_broadcaster"
        args = "0 0.185 0 0 0 0 1 front_axel_middle_link wheel_left_link 100" />

    <!-- IMU (base_link) -->
    <node pkg = "tf"
        type = "static_transform_publisher"
        name = "imu_broadcaster"
        args = "-0.215 -0.030 0.553 0 0 -0.7071068 0.7071068 base_link imu_link 100" />

    <!-- ArUco markers (world) -->
    <node pkg = "tf"
        type = "static_transform_publisher"
        name = "marker1_broadcaster"
        args = "0 0 0 0 0 0 1 world marker1 100" />

    <!-- This node subscribes to all relevant odometry data and generates the
         dynamic transforms -->
    <node pkg="setup_tf" name="setup_tf_node" type="setup_tf_node" respawn="true" />

</launch>
